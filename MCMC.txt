Intuition:

Need to assign an optimal speed to each route segment such that
	1) the route is completed without running out of power
	2) the route is completed as quickly as possible

We know the order the segments must be completed but we know very little about the speeds that will work best. Optimal speeds are affected by:
	1) Car aerodynamic and array performance
	2) Rolling resistance of the tires on the current pavement
		-> this is data we do not have! It varies over the course of the route; we have it for one kind of pavement
	3) Orientation of the car relative to the sun (how much power are we making at different times of day)
	4) Slope of the road (uphill vs downhill)
	5) Headwinds, tailwinds, and crosswinds
	6) Speed limits (must stay within legal limits)

Using the above inputs, we can calculate how much power is used during each route segment. By combining all route segments together we can compute how much power is used by the end of the race.

Primary problems with current strategy model:
	1) It assigns a single speed to the entire race (except speed limited segments in cities etc), which is unrealistic and definitively incorrect
	2) It does not discount future weather appropriately; we can be pretty certain about tomorrow's forecast, but should be less certain about the weather five days from now
	3) Power to drive is a noisy function that is rather imprecise; we should introduce some of this uncertainy into the numbers we use
		-> perhaps select randomly from the different numbers recorded from testing, biased towards the center, but occasionally selecting higher/lower? Rather than generating a fit function and following it exactly

Idea:
Markov Chain Monte Carlo
	Avoid local optima
	Optimize both variability in speeds (with MCMC temperature) and willingness to accept less than perfect


while num_iterations < max_iterations:
	route_speeds = deepcopy(best_route_speeds)
	while num_updated < updates_per_iteration:
		modified_index = random(0, len(route_speeds)
		for speed in range(limp_speed, max_acceptable):
			route_speeds[modified_index] = speed
			power_left, route_time = calculate_speed_and_power(route_speeds)
			if power_left < buffer:
				route_speeds, power_left, route_time = update_with_limp_speed(route_segments)
			if route_time < best_route_time:
				best_route_speeds = route_speeds
				best_route_time = route_time
				best_power_left = power_left

			elif temp > 0:
				if random.uniform(0, 1) < math.exp(-(best_route_time - route_time))/temp):
					best_route_speeds = route_speeds
					best_route_time = route_time
					best_power_left = power_left

		num_updated += 1
